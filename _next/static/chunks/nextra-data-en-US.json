{"/api-reference":{"title":"API Reference","data":{"":"During the development process, all APIs can be viewed in the code editor (e.g. VS Code) by going to their type declaration to view the specific declaration.","uselocalforagestate#useLocalForageState":"The protagonist of this package, it is very similar to useState usage, Please use it together with LocalForageProvider .\n// Normal state variable\nconst [state, setState] = useState(defaultValue)\n// State variables with storage behavior\nconst [state, setState] = useLocalForageState('storage-key', { defaultValue })\nIf you want to delete record from store, you can use setState() or setState(undefined) .","type-declarations#Type Declarations":"declare const useLocalForageState: <T>(\n  key: string,\n  options?: Options<T>,\n) => readonly [T | undefined, (value?: SetState<T> | undefined) => void]\ntype SetStateValue<S> = (prevState?: S) => S\ntype SetState<S> = S | SetStateValue<S>\ntype GetDefaultValue<T> = () => T\ninterface Options<T> {\n  defaultValue?: T | GetDefaultValue<T>\n  serializer?: (value: T) => string\n  deserializer?: (value: string) => T\n  onError?: (error: unknown) => void\n}","examples#Examples":"import React from 'react'\nconst defaultMessage = 'Hello~'\nconst BasicExample: React.FC = () => {\n  const [message, setMessage] = useLocalForageState<string | undefined>(\n    'use-local-forage-state-demo-1',\n    {\n      defaultValue: defaultMessage,\n    },\n  )\n  return (\n    <div className={cls.wrapper}>\n      <Input\n        value={message || ''}\n        placeholder=\"Please enter some words...\"\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <Button variant=\"outline\" onClick={() => setMessage(defaultMessage)}>\n        Reset\n      </Button>\n      <Button variant=\"outline\" onClick={() => setMessage(undefined)}>\n        Clear\n      </Button>\n    </div>\n  )\n}","localforageprovider#LocalForageProvider":"By default, calling useLocalForageState hook directly will use the default configuration and instance of localForage.If you want to specify the configuration and create the specified instance, you can use LocalForageProvider to wrap the business component.","configuration#Configuration":"Pass your localForage configuration, which will be used to create localForage instances and memoize them in the context.For localForage supported configurations, please consult the official documentation.\nSettings API Config - localForage API","type-declarations-1#Type Declarations":"declare const LocalForageProvider: React.FC<LocalForageProviderProps>\ninterface LocalForageProviderProps {\n  config?: LocalForageOptions\n  children: React.ReactNode\n}\nenum LocalForageDriverType {\n  IndexedDB = 'asyncStorage',\n  WebSQL = 'localStorageWrapper',\n  LocalStorage = 'webSQLStorage',\n}\ninterface LocalForageDbInstanceOptions {\n  name?: string\n  storeName?: string\n}\ninterface LocalForageOptions extends LocalForageDbInstanceOptions {\n  driver?: LocalForageDriverType | LocalForageDriverType[]\n  size?: number\n  version?: number\n  description?: string\n}","examples-1#Examples":"import React from 'react'\ninterface ContainerProps {\n  children: React.ReactNode\n}\nconst Container: React.FC<ContainerProps> = ({ children }) => {\n  return (\n    <LocalForageProvider\n      // localForage configuration\n      config={{\n        name: 'react-forage-website',\n        storeName: 'examples',\n      }}\n    >\n      <div className=\"max-w-screen-md mx-auto\">{children}</div>\n    </LocalForageProvider>\n  )\n}","uselocalforagecontext#useLocalForageContext":"With LocalForageProvider , the context information of the storage configuration can be obtained through useLocalForageContext Hook. Generally, there is no need to actively use it, but in some cases, such as if you want to dropdown IndexedDB, you can operate it through the instance of the context.\nDrop Instance - localForage API","type-declarations-2#Type Declarations":"declare const useLocalForageContext: () => LocalForageContextProps","examples-2#Examples":"import React from 'react'\nconst DropInstanceExample: React.FC = () => {\n  const { localforage } = useLocalForageContext()\n  return (\n    <Button variant=\"outline\" onClick={() => localforage.dropInstance()}>\n      Drop Instance\n    </Button>\n  )\n}"}},"/getting-started":{"title":"Getting Started","data":{"":"The idea and part of the source code come from useLocalStorageState of ahooks , and the usage is very similar. If you like the usage of ahooks, you will get started quickly.","usage#Usage":"For complete usage, please refer to the API documentation and source code of the demo component.\nAPI Reference\nSource code of interactive demo\nExamples\nimport React from 'react'\nimport { LocalForageProvider, useLocalForageState } from 'react-forage'\nconst BasicExample = () => {\n  const [message, setMessage] = useLocalForageState<string | undefined>(\n    'use-local-forage-state-demo-1',\n    {\n      defaultValue: defaultMessage,\n    },\n  )\n  return (\n    <>\n      <Input\n        value={message || ''}\n        placeholder=\"Please enter some words...\"\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <Button className=\"mx-2\" onClick={() => setMessage(defaultMessage)}>\n        Reset\n      </Button>\n      <Button onClick={() => setMessage(undefined)}>Clear</Button>\n    </>\n  )\n}\ninterface ContainerProps {\n  children: React.ReactNode\n}\nconst Container: React.FC<ContainerProps> = ({ children }) => {\n  return (\n    <LocalForageProvider\n      config={{\n        name: 'react-forage-website',\n        storeName: 'examples',\n      }}\n    >\n      <div className=\"max-w-screen-md mx-auto\">{children}</div>\n    </LocalForageProvider>\n  )\n}","credits#Credits":"Thanks to:\nThe internal Hooks logic largely refers to ahooks","license#License":"MIT License © 2024-PRESENT chengpeiquan"}},"/":{"title":"Index","data":{"installation#Installation":"Install the module with your favorite package manager:\nnpm install react-forage\npnpm add react-forage\nyarn add react-forage","examples#Examples":"In the following example, state data will be stored in IndexedDB. You can switch to the Application panel in the browser console (press F12). In IndexedDB, you can see a database named react-forage-website and a data table named examples.","store-state-into-indexeddb#Store state into IndexedDB":"Refresh this page and you will get the state from IndexedDB.","store-complex-types-of-data#Store complex types of data":"The useLocalForageState hook will do the serialization and deserialization\nwork automatically.","custom-serialization-and-deserialization-functions#Custom serialization and deserialization functions":"You may not need the default JSON.stringify or JSON.parse to serialize\nstring.","drops-store-of-the-current-instance#Drops store of the current instance":"Please open the console to view the database changes of IndexedDB. When\ninvoked with no arguments, it drops the “store” of the current instance."}}}